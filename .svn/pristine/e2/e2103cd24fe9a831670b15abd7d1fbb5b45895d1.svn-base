<project name="MyProject" default="dist" basedir="." xmlns:jacoco="antlib:org.jacoco.ant">
	<description>simple example build file</description>
	<!--  set global properties for this build  -->
	<property name="encoding" value="UTF-8" />
	<property name="src" location="src" />
	<property name="test" location="test" />
	<property name="doc" location="doc" />
	<property name="build" location="bin" />
	<property name="dist" location="dist" />
	<property name="lib.dir" value="lib" />
	<property name="findbugs.home" value="/var/lib/jenkins/extra/findbugs-3.0.1" />
	<property name="instrumented.dir" value="inslib2" />
	<property name="report.dir" value="dist" />
	<path id="classpath">
		<fileset dir="${lib.dir}" includes="**/*.jar" />
		<fileset dir="/var/lib/jenkins/extra/lib" includes="*.jar" />
	</path>
	<path id="findbugsclasspath">
		<fileset dir="/var/lib/jenkins/extra/findbugs-3.0.1/lib" includes="**/*.jar" />
		<fileset dir="${lib.dir}" includes="**/*.jar" />
		<fileset dir="/var/lib/jenkins/extra/lib" includes="*.jar" />
		<fileset dir="${dist}/lib" includes="**/*.jar" />
	</path>
	<path id="pmdclasspath">
		<fileset dir="/var/lib/jenkins/extra/pmd-bin-5.4.1/lib" includes="**/*.jar" />
		<fileset dir="${lib.dir}" includes="**/*.jar" />
		<fileset dir="${dist}/lib" includes="**/*.jar" />
	</path>
	<taskdef uri="antlib:org.jacoco.ant" resource="/org/jacoco/ant/antlib.xml">
		<classpath path="/var/lib/jenkins/extra/jacoco-0.7.5/lib/jacocoant.jar" />
	</taskdef>
	<target name="init">
		<!--  Create the time stamp  -->
		<tstamp />
		<!--
 Create the build directory structure used by compile 
-->
		<mkdir dir="${build}" />
	</target>
	<target name="compile" depends="init" description="compile the source ">
		<!--  Compile the java code from ${src} into ${build}  -->
		<javac srcdir="${src}" destdir="${build}" encoding="${encoding}" classpathref="classpath" debug="true" debuglevel="lines,vars,source" />
		<javac srcdir="${test}" destdir="${build}" encoding="${encoding}" classpathref="classpath" debug="true" debuglevel="lines,vars,source" />
	</target>
	<target name="dist" depends="compile" description="generate the distribution">
		<!--  Create the distribution directory  -->
		<mkdir dir="${dist}/lib" />
		<!--
 Put everything in ${build} into the MyProject-${DSTAMP}.jar file 
-->
		<jar jarfile="${dist}/lib/MyProject-${DSTAMP}.jar" basedir="${build}" />
	</target>
	<target name="clean" description="clean up">
		<!--  Delete the ${build} and ${dist} directory trees  -->
		<delete dir="${build}" />
		<delete dir="${dist}" />
		<delete dir="${instrumented.dir}" />
		<delete dir="inslib" />
		<delete dir="inslib2" />
	</target>
	<target name="cpd" description="CopyPasteDetector" depends="dist">
		<delete file="${dist}/cpd.xml" />
		<taskdef name="cpd" classname="net.sourceforge.pmd.cpd.CPDTask" classpathref="pmdclasspath" />
		<taskdef resource="net/sf/antcontrib/antcontrib.properties" />
		<trycatch>
			<try>
				<cpd minimumTokenCount="100" outputFile="${dist}/cpd.xml" format="xml">
					<fileset dir="${src}">
						<include name="**/*.java" />
						<include name="**/*.js" />
					</fileset>
				</cpd>
			</try>
			<catch>
				<echo>CPD failed.</echo>
			</catch>
		</trycatch>
	</target>
	<target name="findbugs" description="Findbugs" depends="dist">
		<delete file="${dist}/findbugs.xml" />
		<taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" classpathref="findbugsclasspath" />
		<findbugs home="${findbugs.home}" output="xml" outputFile="${dist}/findbugs.xml">
			<auxClasspath>
				<fileset dir="/var/lib/jenkins/extra/lib" includes="*.jar" />
				<fileset dir="${lib.dir}" includes="**/*.jar" />
				<!--
				<fileset dir="/usr/share/java" includes="junit.jar" /> 
-->
			</auxClasspath>
			<sourcePath path="${src}" />
			<class location="${build}" />
		</findbugs>
	</target>
	<path id="checkstyle.classpath">
		<fileset dir="/var/lib/jenkins/extra/lib" includes="*.jar" />
		<fileset dir="${dist}/lib" includes="*.jar" />
		<fileset file="/var/lib/jenkins/extra/checkstyle-6.14.1/checkstyle-6.14.1-all.jar" />
	</path>
	<target name="checkstyle" description="Checkstyle" depends="dist">
		<delete file="${dist}/checkstyle.xml" />
		<taskdef resource="checkstyletask.properties" classpathref="checkstyle.classpath" />
		<checkstyle config="/var/lib/jenkins/extra/ipl_checks.xml" failOnViolation="false" classpathref="checkstyle.classpath">
			<fileset dir="${src}" includes="**/*.java" />
			<formatter type="xml" toFile="${dist}/checkstyle.xml" />
		</checkstyle>
	</target>
	<target name="javadoc" description="Javadoc" depends="dist">
		<delete dir="${doc}" />
		<mkdir dir="${doc}" />
		<javadoc destdir="${doc}" author="true" version="true" defaultexcludes="yes" encoding="${encoding}" docencoding="UTF-8" charset="utf-8" use="true" classpathref="classpath">
			<fileset dir="${src}" />
		</javadoc>
		<!--  excludepackagenames="com.dummy.test.doc-files.*"  -->
	</target>
	<target name="junit">
		<delete dir="${dist}/junit" />
		<mkdir dir="${dist}/junit" />
		<jacoco:coverage>
			<junit failureProperty="test.failed" fork="true" forkmode="once">
				<classpath>
					<fileset dir="${lib.dir}" includes="**/*.jar" />
					<fileset dir="${dist}/lib" includes="**/*.jar" />
					<fileset dir="/var/lib/jenkins/extra/lib" includes="*.jar" />
				</classpath>
				<formatter type="xml" />
				<batchtest todir="${dist}/junit">
					<fileset dir="${test}" includes="**/Test*.java" />
					<fileset dir="${test}" includes="**/*Test.java" />
				</batchtest>
			</junit>
		</jacoco:coverage>
	</target>
	<target name="simplejunit" description="JUnit Testing" depends="dist">
		<delete dir="${dist}/junit" />
		<mkdir dir="${dist}/junit" />
		<junit failureProperty="test.failed">
			<classpath>
				<fileset dir="${lib.dir}" includes="**/*.jar" />
				<fileset dir="${dist}/lib" includes="**/*.jar" />
				<fileset dir="/var/lib/jenkins/extra/lib" includes="*.jar" />
			</classpath>
			<formatter type="xml" />
			<batchtest todir="${dist}/junit">
				<fileset dir="${test}" includes="**/Test*.java" />
				<fileset dir="${test}" includes="**/*Test.java" />
			</batchtest>
		</junit>
	</target>
	<target name="jenkins" description="Jenkins target" depends="clean,cpd,checkstyle,findbugs,javadoc,junit">
	</target>
</project>
